c = code
n = syntax not yet available
_ = not yet implemented

Special operators
-----------------

c block
c catch
c eval-when
c flet
c function
c go
c if
c labels
c let
c let*
c load-time-value
c locally
c macrolet
c multiple-value-call
c multiple-value-prog1
c progn
c progv
c quote
c return-from
c setq
c symbol-macrolet
c tagbody
c the
c throw
c unwind-protect

Macro operators
---------------

c and
n assert
n call-method
c case
c ccase
n check-type
c cond
c ctypecase
c declaim
c decf
c defclass
c defconstant
c defgeneric
n define-compiler-macro
c define-condition
n define-method-combination
n define-modify-macro
n define-setf-expander
n define-symbol-macro
c defmacro
c defmethod
c defpackage
c defparameter
n defsetf
_ defstruct
c deftype
c defun
c defvar
c destructuring-bind
c do
c do*
c do-all-symbols
c do-external-symbols
c do-symbols
c dolist
c dotimes
c ecase
c etypecase
c formatter
c handler-bind
_ handler-case
n ignore-errors
c in-package
c incf
? lambda
n loop
n loop-finish
c multiple-value-bind
n multiple-value-list
n multiple-value-setq
n nth-value
c or
c pop
_ pprint-exit-if-list-exhausted
_ pprint-logical-block
_ pprint-pop
_ print-unreadable-object
_ prog
_ prog*
c prog1
c prog2
_ psetf
c psetq
c push
_ pushnew
_ remf
c restart-bind
c restart-case
c return
_ rotatef
_ setf
_ shiftf
_ step
_ time
_ trace
c typecase
c unless
_ untrace
c when
n with-accessors
n with-compilation-unit
n with-condition-restarts
n with-hash-table-iterator
_ with-input-from-string
_ with-open-file
_ with-open-stream
_ with-output-to-string
n with-package-iterator
n with-simple-restart
n with-slots
_ with-standard-io-syntax
