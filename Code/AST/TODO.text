c = code
n = syntax not yet available
_ = not yet implemented

Special operators
-----------------

c block
c catch
c eval-when
c flet
c function
c go
c if
c labels
c let
c let*
c load-time-value
c locally
c macrolet
c multiple-value-call
c multiple-value-prog1
c progn
c progv
c quote
c return-from
c setq
c symbol-macrolet
c tagbody
c the
c throw
c unwind-protect

Macro operators
---------------

n and
n assert
n call-method
c case
c ccase
n check-type
c cond
c ctypecase
c declaim
n decf
c defclass
_ defconstant
c defgeneric
n define-compiler-macro
c define-condition
n define-method-combination
n define-modify-macro
n define-setf-expander
n define-symbol-macro
c defmacro
c defmethod
_ defpackage
c defparameter
n defsetf
_ defstruct
_ deftype
c defun
c defvar
c destructuring-bind
n do
n do*
n do-all-symbols
n do-external-symbols
n do-symbols
n dolist
n dotimes
c ecase
c etypecase
n formatter
c handler-bind
_ handler-case
n ignore-errors
c in-package
n incf
? lambda
n loop
n loop-finish
c multiple-value-bind
_ multiple-value-list
_ multiple-value-setq
n nth-value
n or
n pop
n pprint-exit-if-list-exhausted
n pprint-logical-block
n pprint-pop
n print-unreadable-object
n prog
n prog*
n prog1
n prog2
n psetf
c psetq
n push
n pushnew
n remf
c restart-bind
c restart-case
c return
n rotatef
n setf
n shiftf
n step
n time
n trace
c typecase
n unless
n untrace
n when
n with-accessors
n with-compilation-unit
n with-condition-restarts
n with-hash-table-iterator
n with-input-from-string
n with-open-file
n with-open-stream
n with-output-to-string
n with-package-iterator
n with-simple-restart
n with-slots
n with-standard-io-syntax
